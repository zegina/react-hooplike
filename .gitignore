# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
1.删除app.css
2.删除app.test.js 无用的测试文件
3.删除logo.svg
4.删除setupTests.js 无用的测试文件
5.安装scss npm install sass -D  npm install node-sass --save 支持一些原生css不支持的高级语法，比如嵌套，变量使用等，让代码更加高效灵活
6.安装AntD 文档https://ant.design/docs/react/use-with-create-react-app-cn
7.配置基础路由router 安装路由包 npm install react-router-dom --save;..........等
8.配置@别名路径 安装craco 工具包-》增加mcraco.config.js文件-》修改scripts命令-》测试
npm i @craco/craco -D 安装好后吧原本的npackage.json里的"scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },替换为"scripts": {
    "start": "craco start",
    "build": "craco build",
    "test": "craco test",
    "eject": "react-scripts eject"
  },重启项目
9.vscode提示配置
在项目根目录创建jsconfig.json配置文件，添加以下配置
{
    "compilerOptions": {
        "baseUrl": "./",
        "paths": {
            "@/*": ["src/*"]
        }
    }
}
10.使用gitee管理项目
echo "# react-hooplike" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/zegina/react-hooplike.git
git push -u origin main

git remote add origin https://github.com/zegina/react-hooplike.git
git branch -M main
git push -u origin main
11.安装axios npm install axios 
12.使用redux 安装 npm install @reduxjs/toolkit 和 npm install redux
13.layout页面
14.安装npm install normalize.css 样式初始化 比如在入口文件index.js中引入import 'normalize.css'
layout二级路由配置,新建article,home,publish文件夹，在router配置
点击左侧菜单，对应的页面展示，跳转路由，const onMenuClick = (route) => {
        console.log('菜单被点击了', route)
        const path = route.key
        navigate(path)
    }
点击当前菜单，实现高亮
 // 1. 获取当前路由路径，通过提供的useLocation()钩子
    const location = useLocation()
    console.log(location.pathname)
    const selectedkey = location.pathname
    把selectedkey添加到<Menu />
Layout展示个人信息，用户信息应该放到哪里？放到redux里面，因为用户信息是全局的，任何地方都可以使用
Layout退出登录实现
Layout处理token失效。与后端配合，通常token失效后再去请求接口，接口会返回401，前端拦截到401后，跳转到登录页
在响应拦截器监控401状态码，如果是401，清除失效token,跳转到登录页
使用Home-Echarts基础图表 安装npm install echarts,封装echarts组件,方便复用
15安装富文本编辑器 npm install react-quill@2.0.0-beta.2 报错再继续安装npm install react-quill@2.0.0-beta.2 --legacy-peer-deps
16.列表页面Article
关于两个页面都用到了频道，可以使用自定义业务hook=》创建一个use打头的函数，在函数中封装业务逻辑，并return出，组件中要用到的状态数据，组件中导出函数，并解构状态数据使用
新建hooks文件夹，里面新建useChannel.js，逻辑就写在这里面
17.项目打包，npm run build,打包后的文件在build文件夹下，可以直接部署到服务器上
18.项目本地预览->
1. 全局安装本地服务包 `npm i -g serve`  该包提供了serve命令，用来启动本地服务器
2. 在项目根目录中执行命令 `serve -s ./build`  在build目录中开启服务器
3. 在浏览器中访问：`http://localhost:3000/` 预览项目
19.优化-路由懒加载
1. 使用 lazy 方法导入路由组件
2. 使用内置的 Suspense 组件渲染路由组件